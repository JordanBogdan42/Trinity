/**
 * @file HistogramDialog.cpp
 * @date Jan 27, 2014
 * @author sizun
 * 
 * @note SVN tag: $Id$
 * @note Contributor(s): Patrick Sizun
 * @note 
 * @note This file is part of the ConfigWizard software project.
 *
 * @copyright Â© Commissariat a l'Energie Atomique et aux Energies Alternatives (CEA)
 *
 * @par FREE SOFTWARE LICENCING
 * This software is governed by the CeCILL license under French law and abiding  * by the rules of distribution of free
 * software. You can use, modify and/or redistribute the software under the terms of the CeCILL license as circulated by
 * CEA, CNRS and INRIA at the following URL: "http://www.cecill.info". As a counterpart to the access to the source code
 * and rights to copy, modify and redistribute granted by the license, users are provided only with a limited warranty
 * and the software's author, the holder of the economic rights, and the successive licensors have only limited
 * liability. In this respect, the user's attention is drawn to the risks associated with loading, using, modifying
 * and/or developing or reproducing the software by the user in light of its specific status of free software, that may
 * mean that it is complicated to manipulate, and that also therefore means that it is reserved for developers and
 * experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling the security of their systems and/or data
 * to be ensured and, more generally, to use and operate it in the same conditions as regards security. The fact that
 * you are presently reading this means that you have had knowledge of the CeCILL license and that you accept its terms.
 *
 * @par COMMERCIAL SOFTWARE LICENCING
 * You can obtain this software from CEA under other licencing terms for commercial purposes. For this you will need to
 * negotiate a specific contract with a legal representative of CEA.
 *
 */

#include "HistogramDialog.h"

#ifdef HAVE_QTROOT
#include <QBoxLayout>
#include <QCloseEvent>
#include <QMdiArea>
#include <QMdiSubWindow>
#include <QPushButton>

#include <TCanvas.h>
#include <TH1F.h>
#endif

namespace get
{
namespace root
{
#ifdef HAVE_QTROOT
//_________________________________________________________________________________________________
HistogramDialog::HistogramDialog(QWidget* parent)
    : QDialog(parent), histogramCount(0)
{
    mdiArea = new QMdiArea(this);
#if QT_VERSION >= 0x040400
    mdiArea->setViewMode(QMdiArea::SubWindowView);
    mdiArea->setActivationOrder(QMdiArea::QMdiArea::StackingOrder);
#endif
    buttonBox = new QDialogButtonBox(QDialogButtonBox::Close, Qt::Horizontal, this);
#if QT_VERSION >= 0x040400
    mdiModeButton = buttonBox->addButton(QString("MDI"), QDialogButtonBox::ActionRole);
    mdiModeButton->setCheckable(true);
    mdiModeButton->setChecked(QMdiArea::SubWindowView == mdiArea->viewMode());
#endif

    QBoxLayout* layout = new QVBoxLayout;
    layout->addWidget(mdiArea);
    layout->addWidget(buttonBox);
    setLayout(layout);
    setWindowTitle(tr("Histograms"));

    QObject::connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));
    QObject::connect(buttonBox, SIGNAL(clicked(QAbstractButton*)), this, SLOT(on_buttonBox_clicked(QAbstractButton*)));
}
//_________________________________________________________________________________________________
void HistogramDialog::setMdiModeEnabled(bool enabled)
{
#if QT_VERSION >= 0x040400
	mdiArea->setViewMode(enabled?QMdiArea::SubWindowView:QMdiArea::TabbedView);
	if (enabled)
		mdiArea->tileSubWindows();
#endif
}
//_________________________________________________________________________________________________
void HistogramDialog::closeEvent(QCloseEvent *event)
{
    event->ignore();
}
//_________________________________________________________________________________________________
void HistogramDialog::onHistogramClosed()
{
	mdiArea->tileSubWindows();
}
//_________________________________________________________________________________________________
void HistogramDialog::on_buttonBox_clicked(QAbstractButton* button)
{
    // Toggle between "MDI" and "Tab" modes
    if (button == mdiModeButton)
    {
    	setMdiModeEnabled(mdiModeButton->isChecked());
    }
}
//_________________________________________________________________________________________________
void HistogramDialog::addHistogram(TH1* hist, const char* title, const char* canvasName)
{
    // Build widget
	HistogramWidget* histoWidget = new HistogramWidget(this);
	hist->SetTitle(title);
	histoWidget->setHist(hist, title);
	TCanvas* canvas = (TCanvas*) histoWidget->canvas();
	canvas->cd();
	canvas->SetName(canvasName);
	canvas->SetTitle(title);
	canvas->SetBorderMode(0);
	canvas->SetRightMargin(0.15);
	if (hist->GetDimension() >=2)
		hist->Draw("LEGO2Z");
	else
		hist->Draw();

    addHistogram(histoWidget);
}
//_________________________________________________________________________________________________
void HistogramDialog::addHistogram(HistogramWidget* histoWidget)
{
	QMdiSubWindow* subWindow = mdiArea->addSubWindow(histoWidget);
	subWindow->setWindowTitle(tr("Histogram %1").arg(++histogramCount));
	mdiArea->setActiveSubWindow(0);
	subWindow->show();
	mdiArea->tileSubWindows();
	QObject::connect(subWindow, SIGNAL(destroyed(QObject*)), this, SLOT(onHistogramClosed()));
}
//_________________________________________________________________________________________________
#endif // HAVE_QTROOT
} /* namespace root */
} /* namespace get */

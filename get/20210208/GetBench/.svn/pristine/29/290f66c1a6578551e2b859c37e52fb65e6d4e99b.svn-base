/**
 * @file AsAdAlarmWatcher.cpp
 * @date Jan 9, 2014
 * @author sizun
 * 
 * @note SVN tag: $Id$
 * @note Contributor(s): Patrick Sizun
 * @note 
 * @note This file is part of the GetBench software project.
 *
 * @copyright Â© Commissariat a l'Energie Atomique et aux Energies Alternatives (CEA)
 *
 * @par FREE SOFTWARE LICENCING
 * This software is governed by the CeCILL license under French law and abiding  * by the rules of distribution of free
 * software. You can use, modify and/or redistribute the software under the terms of the CeCILL license as circulated by
 * CEA, CNRS and INRIA at the following URL: "http://www.cecill.info". As a counterpart to the access to the source code
 * and rights to copy, modify and redistribute granted by the license, users are provided only with a limited warranty
 * and the software's author, the holder of the economic rights, and the successive licensors have only limited
 * liability. In this respect, the user's attention is drawn to the risks associated with loading, using, modifying
 * and/or developing or reproducing the software by the user in light of its specific status of free software, that may
 * mean that it is complicated to manipulate, and that also therefore means that it is reserved for developers and
 * experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling the security of their systems and/or data
 * to be ensured and, more generally, to use and operate it in the same conditions as regards security. The fact that
 * you are presently reading this means that you have had knowledge of the CeCILL license and that you accept its terms.
 *
 * @par COMMERCIAL SOFTWARE LICENCING
 * You can obtain this software from CEA under other licencing terms for commercial purposes. For this you will need to
 * negotiate a specific contract with a legal representative of CEA.
 *
 */

#include "AsAdAlarmWatcher.h"
#include "utl/Logging.h"
#include "boost/cstdint.hpp"

namespace get
{
namespace cobo
{
//__________________________________________________________________________________________________
/**
 * Constructs a task checking CoBo's AsAd alarm register periodically.
 * @param coboId Identifier of the CoBo board.
 * @param ctrl CoBo control device.
 * @param alarmSvc Service to submit alarms to.
 * @param period_ms Period, in ms.
 */
AsAdAlarmWatcher::AsAdAlarmWatcher(const std::string & coboId, mdaq::hw::DevicePrx ctrl, mt::AlarmServicePrx alarmSvc,
		size_t period_ms)
	: utl::PeriodicTask(period_ms), coboId_(coboId), ctrl_(ctrl), alarmSvc_(alarmSvc)
{
}
//__________________________________________________________________________________________________
AsAdAlarmWatcher::~AsAdAlarmWatcher()
{
}
//__________________________________________________________________________________________________
/**
 * Checks the AsAd alarm bits.
 * Once AsAd is powered on, we should have PLG=1 (CoBo side; PLG=0 on AsAd side), AL=0, PWU=1.
 */
void AsAdAlarmWatcher::doTask()
{
	try
	{
		const uint8_t alarmBits = ctrl_->readField("asadStatus", "alarm");
		const uint8_t enabledAsAdBits = ctrl_->readRegister("asadEnable");
		if (0 != (alarmBits & enabledAsAdBits))
		{
			const uint16_t asadMask = alarmBits & enabledAsAdBits;
			LOG_ERROR() << "An AsAd board is in auto-protection mode (AL="
					<< std::showbase << std::hex << asadMask << std::dec << ")!";
			if (alarmSvc_)
			{
				alarmSvc_->sendAsadAlarm(coboId_, asadMask);
			}
			// Set 'initDone' bit to 0 to inform CoBo is no longer ready.
			try
			{
				ctrl_->writeField("mutantConfig", "initDone", false);
			}
			catch (const mdaq::utl::CmdException &) {}
		}
	}
	catch (const mdaq::utl::CmdException & e)
	{
		LOG_ERROR() << "Could not check AsAd alarm bits: " << e.reason;
	}
	catch (const std::exception & e)
	{
		LOG_ERROR() << "Could not check AsAd alarm bits: " << e.what();
	}
}
//__________________________________________________________________________________________________
} /* namespace cobo */
} /* namespace get */

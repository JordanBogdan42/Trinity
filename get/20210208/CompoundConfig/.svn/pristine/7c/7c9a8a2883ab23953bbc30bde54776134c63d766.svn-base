/**
\page page_Integration Integration instructions

\section sec_Integration_Content Content
<ul>
	<li>\ref sec_Integration_Introduction </li>
	<li>\ref sec_Integration_Preprocessor </li>
	<li>\ref sec_Integration_Linker </li>
	<li>\ref sec_Integration_Debug </li>
	<li>\ref sec_Integration_Autotools </li>
</ul>



\section sec_Integration_Introduction Introduction
<p>
CompoundConfig can be integrated into an application or a library in the same
way as any library does. Whatever the build system is (command line, IDE,
makefile, autotools, ...) it all goes down to add the include path to the
preprocessor flags (CPPFLAGS), and add the library path and the libraries to the
linker flags (LDFLAGS).



\section sec_Integration_Preprocessor Preprocessor flags
<p>
You can get preprocessor flags by calling:
\verbatim
pkg-config --cflags CompoundConfig
\endverbatim
<p>
Then you just have to add these flags to each of your commands compiling a
source file. Example:
\verbatim
g++ `pkg-config --cflags CompoundConfig` -Wall -c main.cpp
\endverbatim
<p>
If you are building a library, you just need to compile all the object files
using these preprocessor flags.


\section sec_Integration_Linker Linker flags
<p>
You will need to specify linker flags when linking a program with CompoundConfig
or with a library of yours using CompoundConfig.
<p>
You can get linker flags by calling:
\verbatim
pkg-config --libs CompoundConfig
\endverbatim
<p>
Then you just have to add these flags to each of your commands linking a
program. Example:
\verbatim
g++ `pkg-config --libs CompoundConfig` -o test main.o
\endverbatim
<p>
If you want to compile and link a program in a single command:
\verbatim
g++ `pkg-config --cflags --libs CompoundConfig` -Wall -o myprog main.cpp
\endverbatim



\section sec_Integration_Debug Linking against the debug version
<p>
In some cases it may be useful to link your application against the debug
version of CompoundConfig. It happens if you suspect there is a problem in our
library and want to see what's happening in CompoundConfig using a debugger.
<p>
The debug version of CompoundConfig is suffixed by "-d". Here is how to get the
linker flags of the debug version:
\verbatim
pkg-config --libs CompoundConfig-d
\endverbatim



\section sec_Integration_Autotools Using autotools
<p>
If you are using the autotools to build your programs or libraries, you just have
to use the PKG_CHECK_MODULES macro. I will detect if the library exists,
matches version requirements, and it will create "substitution variables" to use
in your makefile.am.
See the pkg-config man page (also available <a href="http://linux.die.net/man/1/pkg-config">here</a>)
for more informations.
<p>
configure.ac fragment:
\verbatim
PKG_CHECK_MODULES(COMPOUND_CONFIG, CompoundConfig >= 2.0.0)
AC_SUBST(COMPOUND_CONFIG_CFLAGS)
AC_SUBST(COMPOUND_CONFIG_LIBS)
\endverbatim
<p>
makefile.am example:
\verbatim
AM_CPPFLAGS = $(COMPOUND_CONFIG_CFLAGS)
bin_PROGRAMS = myprog
myprog_SOURCES = main.cpp
myprog_LDFLAGS = $(COMPOUND_CONFIG_LIBS)
\endverbatim
<p>
If you are building a library and use pkg-config for it, don't forget to declare
CompoundConfig as a required library in the .pc.in, so that the flags propagate.
Example of .pc.in file:
\verbatim
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@

Name: mylib
Description:
Requires: CompoundConfig >= 2.0.0
Version: @VERSION@
Libs: -L${libdir} -lmylib
Cflags: -I${includedir}/mylib
\endverbatim

*/
# ax_utl_log.m4: a m4 macro to select log level for the Utilities logging module.
#
# Synopsis:
#
# AX_UTL_LOG([DEFAULT_LOG_LEVEL])
#
# Copyright Â© 2014 Frederic Chateau <frederic.chateau@cea.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.
#
#serial 2

AC_DEFUN([AX_UTL_LOG],
[
	AC_ARG_WITH([log-level],
		[AS_HELP_STRING([--with-log-level], [select the log level])],
		[
			case "$withval" in
			no | none)         utl_log_level=no ;;
			fatal)             utl_log_level=4  ;;
			error)             utl_log_level=3  ;;
			warn)              utl_log_level=2  ;;
			info)              utl_log_level=1  ;;
			all | debug | yes) utl_log_level=0  ;;
			@<:@0-9@:>@)       utl_log_level=$withval ;;
			*)
				AC_ERROR([invalid log level specification])
				;;
			esac
		],
		[want_default_level=yes]
	)

	dnl Default log level
	if test "$want_default_level" = "yes"
	then
		ifelse([$1], [], [utl_log_level=0],
		[
		case "$1" in
			no | none)         utl_log_level=no ;;
			fatal | 4)         utl_log_level=4  ;;
			error | 3)         utl_log_level=3  ;;
			warn  | 2)         utl_log_level=2  ;;
			info  | 1)         utl_log_level=1  ;;
			all | debug | yes) utl_log_level=0  ;;
			@<:@0-9@:>@)       utl_log_level=$1 ;;
			*)                 utl_log_level=0  ;;
		esac
		])
	fi

	dnl Actual log level
	if test "$utl_log_level" != "no"
	then
		want_utl_log="yes"
		CPPFLAGS="-DUTL_LOG_LEVEL=$utl_log_level ${CPPFLAGS}"
	else
		want_utl_log="no"
	fi

	AC_ARG_ENABLE([threadsafe-logging],
		AS_HELP_STRING([--enable-threadsafe-logging], [Turn on thread-safe logging features]),
		[
		case "${enableval}" in
			yes) enable_threadsafe_logging=yes ;;
			no)  enable_threadsafe_logging=no ;;
			*)   AC_MSG_ERROR([bad value ${enableval} for --enable-threadsafe-logging]) ;;
		esac
		],
		[enable_threadsafe_logging=yes]
	)
	if test "$enable_threadsafe_logging" = "yes"
	then
		AC_REQUIRE([AX_BOOST_BASE])
		AS_IF([test "$host_os" = "vxworks"],
			[AC_MSG_NOTICE([We are on VxWorks: No boost libraries needed.])],
			[AC_MSG_NOTICE([We are on Linux: Thread and System boost libraries needed.])
			 AX_BOOST_SYSTEM
			 AX_BOOST_THREAD
			 UTL_LOG_THREADSAFE_LIBS="${BOOST_SYSTEM_LIB} ${BOOST_THREAD_LIB}"
			 AC_SUBST([UTL_LOG_THREADSAFE_LIBS])
			]
		)
		UTL_LOG_THREADSAFE_CPPFLAGS="-DUTL_LOG_THREADSAFE=1"
		AC_SUBST([UTL_LOG_THREADSAFE_CPPFLAGS])
	fi
])

/*
 * $Id$
 * @file FrameDictionaryTest.cpp
 * @created 16 mars 2012
 * @author sizun
 * -----------------------------------------------------------------------------
 * Â© Commissariat a l'Energie Atomique et aux Energies Alternatives (CEA)
 * -----------------------------------------------------------------------------
 * FREE SOFTWARE LICENCING
 * This software is governed by the CeCILL license under French law and abiding
 * by the rules of distribution of free software. You can use, modify and/or
 * redistribute the software under the terms of the CeCILL license as circulated
 * by CEA, CNRS and INRIA at the following URL: "http://www.cecill.info".
 * As a counterpart to the access to the source code and rights to copy, modify
 * and redistribute granted by the license, users are provided only with a
 * limited warranty and the software's author, the holder of the economic
 * rights, and the successive licensors have only limited liability. In this
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user in
 * light of its specific status of free software, that may mean that it is
 * complicated to manipulate, and that also therefore means that it is reserved
 * for developers and experienced professionals having in-depth computer
 * knowledge. Users are therefore encouraged to load and test the software's
 * suitability as regards their requirements in conditions enabling the security
 * of their systems and/or data to be ensured and, more generally, to use and
 * operate it in the same conditions as regards security.
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 * -----------------------------------------------------------------------------
 * COMMERCIAL SOFTWARE LICENCING
 * You can obtain this software from CEA under other licencing terms for
 * commercial purposes. For this you will need to negotiate a specific contract
 * with a legal representative of CEA.
 * -----------------------------------------------------------------------------
 */
#include "mfm/FrameDictionary.h"
using namespace mfm;
#include "tut.h"
#include <string>
#include <fstream>
using namespace std;

#ifndef VXWORKS
#define TEMP_DIR "/tmp/"
#else
#define TEMP_DIR "tmp/"
#endif

namespace tut
{
///////////////////////////////////////////////////////////////////////////////
// test fixture definition
///////////////////////////////////////////////////////////////////////////////
struct frame_dictionary_test_data
{
};

typedef test_group<frame_dictionary_test_data> testgroup;
typedef testgroup::object testobject;
testgroup frame_dictionary_testgroup("FrameDictionary");

///////////////////////////////////////////////////////////////////////////////
// test methods body
///////////////////////////////////////////////////////////////////////////////

/**
 * Checks addFormats.
 */
template<> template<>
void testobject::test<1>()
{
    set_test_name("Checks addFormats");

    ensure_equals("addFormats", FrameDictionary::instance().addFormats("mfm/sample_formats.xml"), 4u);
}

/**
 * Checks listFormats.
 */
template<> template<>
void testobject::test<2>()
{
    set_test_name("Checks listFormats");

    ensure_equals("listFormats", FrameDictionary::instance().listFormats(), 4u);
}

/**
 * Checks findFormat.
 */
template<> template<>
void testobject::test<3>()
{
    set_test_name("Checks findFormat");

    ensure_equals("findFormat", FrameDictionary::instance().findFormat(1, 1).formatName(), "CoBo");
}

/**
 * Checks findLatestFormat.
 */
template<> template<>
void testobject::test<4>()
{
    set_test_name("Checks findLatestFormat");

    try
    {
    	FrameFormat const & format = FrameDictionary::instance().findLatestFormat(1);
        ensure_equals("findLatestFormat", format.formatName(), "CoBo");
        ensure_equals("findLatestFormat", format.revision(), 1u);
    }
    catch (...)
    {
    	fail("FrameDictionary::findLatestFormat failed");
    }
}

} // namespace tut




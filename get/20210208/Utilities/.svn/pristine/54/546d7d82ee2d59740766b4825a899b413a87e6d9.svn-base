/* =============================================================================
 * StackFrame.h
 * -----------------------------------------------------------------------------
 * class utl::stack::BaseStackFrame
 * class utl::stack::StackFrame
 * Created on: 29 août 2012 at Irfu/Sedi/Lilas, CEA Saclay, F-91191, France
 * Author: fchateau
 * -----------------------------------------------------------------------------
 * © Commissariat a l'Energie Atomique et aux Energies Alternatives (CEA)
 * -----------------------------------------------------------------------------
 * Contributors: fchateau
 * -----------------------------------------------------------------------------
 * This software is part of the Utilities project.
 * -----------------------------------------------------------------------------
 * FREE SOFTWARE LICENCING
 * This software is governed by the CeCILL license under French law and abiding
 * by the rules of distribution of free software. You can use, modify and/or
 * redistribute the software under the terms of the CeCILL license as circulated
 * by CEA, CNRS and INRIA at the following URL: "http://www.cecill.info".
 * As a counterpart to the access to the source code and rights to copy, modify
 * and redistribute granted by the license, users are provided only with a
 * limited warranty and the software's author, the holder of the economic
 * rights, and the successive licensors have only limited liability. In this
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user in
 * light of its specific status of free software, that may mean that it is
 * complicated to manipulate, and that also therefore means that it is reserved
 * for developers and experienced professionals having in-depth computer
 * knowledge. Users are therefore encouraged to load and test the software's
 * suitability as regards their requirements in conditions enabling the security
 * of their systems and/or data to be ensured and, more generally, to use and
 * operate it in the same conditions as regards security.
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 * -----------------------------------------------------------------------------
 * COMMERCIAL SOFTWARE LICENCING
 * You can obtain this software from CEA under other licencing terms for
 * commercial purposes. For this you will need to negotiate a specific contract
 * with a legal representative of CEA.
 * =============================================================================
 */

#ifndef utl_stack_StackFrame_h_INCLUDED
#define utl_stack_StackFrame_h_INCLUDED

#include "SymbolResolver.h"
#include "LineResolver.h"

namespace utl
{
namespace stack
{

/**
 * This is the base class for the policy chain generated by StackFrame: it provides
 * the default implementation for methods when policy defined ones do not shadow them.
 * It also defines the "address" member, that can be accessible from policies.
 */
class BaseStackFrame
{
public:
	const char* symbol() { return ""; }
	const char* mangledSymbol() { return ""; }
	intptr_t displacement() { return 0; }
	const char* module() { return ""; }
	const char* source() { return ""; }
	int line() { return 0; }

	void* address() const { return addr; }

	template<template<class> class, template<class> class> friend class StackFrame;
private:
	void* addr; ///< the stack frame return address to use by policies.
};

/**
 * This is a policy-based class whose purpose is to expose a system independent
 * API providing as much information as possible on a stack-frame return address
 * obtained from a stack trace.
 * It takes 2 policies in parameter:
 *  - SymResolver: which is supposed to find the symbol name matching the address
 *  - LineResolver: which is supposed to find the source line at the address
 * These policies are forming an inheritance chain whose base class is
 * BaseStackFrame. It contains the stack-frame return address and default
 * information accessors implementation.
 * In order to be able to adapt to different system API, there is no strict
 * requirement telling which policy should implement which method.
 * It is completely possible to implement all methods in a single policy
 * and leave the other one to default, for example.
 * The only hard requirement on policies is that they shall have a
 * template parameter class and inherit from it (to create the chain).
 * Apart from that, they shall try to implement as many methods of
 * BaseStackFrame as possible.
 */
template<
	template<class> class SymResolver = NoSymbolResolver,
	template<class> class LineResolver = NoLineResolver
>
class StackFrame
	: public SymResolver<LineResolver<BaseStackFrame> >
{
public:
	StackFrame(void* address) { this->addr = address; }
};

} /* namespace stack */
} /* namespace utl */

#endif /* utl_stack_StackFrame_h_INCLUDED */

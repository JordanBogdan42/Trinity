/*
 * $Id$
 * @file EditConfigDialog.h
 * @created 3 mai 2012
 * @author sizun
 * -----------------------------------------------------------------------------
 * Â© Commissariat a l'Energie Atomique et aux Energies Alternatives (CEA)
 * -----------------------------------------------------------------------------
 * FREE SOFTWARE LICENCING
 * This software is governed by the CeCILL license under French law and abiding
 * by the rules of distribution of free software. You can use, modify and/or
 * redistribute the software under the terms of the CeCILL license as circulated
 * by CEA, CNRS and INRIA at the following URL: "http://www.cecill.info".
 * As a counterpart to the access to the source code and rights to copy, modify
 * and redistribute granted by the license, users are provided only with a
 * limited warranty and the software's author, the holder of the economic
 * rights, and the successive licensors have only limited liability. In this
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user in
 * light of its specific status of free software, that may mean that it is
 * complicated to manipulate, and that also therefore means that it is reserved
 * for developers and experienced professionals having in-depth computer
 * knowledge. Users are therefore encouraged to load and test the software's
 * suitability as regards their requirements in conditions enabling the security
 * of their systems and/or data to be ensured and, more generally, to use and
 * operate it in the same conditions as regards security.
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 * -----------------------------------------------------------------------------
 * COMMERCIAL SOFTWARE LICENCING
 * You can obtain this software from CEA under other licencing terms for
 * commercial purposes. For this you will need to negotiate a specific contract
 * with a legal representative of CEA.
 * -----------------------------------------------------------------------------
 */

#ifndef CCfg_Ui_EditConfigDialog_h_INCLUDED
#define CCfg_Ui_EditConfigDialog_h_INCLUDED

#include <QDialog>
#include <QUndoGroup>
#include <memory>
#include <string>

// Forward declarations
class QStatusBar;

namespace Ui
{
	class EditConfigDialog;
}

namespace CCfg
{
// Forward declarations
namespace Model {
	class ConfigNode;
	class ConfigModel;
}
namespace Control {
	class Workspace;
	class BaseConfigEditorController;
}
namespace Ui
{
// Forward declarations
class AttributeBuilderWidget;
class AttributeFinderDialog;
class ClosableTabWidget;
//_____________________________________________________________________________
/**
 * A dialog for editing or viewing a single configuration document.
 */
class EditConfigDialog : public QDialog
{
	Q_OBJECT
	std::auto_ptr< ::Ui::EditConfigDialog > widgets; // the widgets generated by the designer.
	// @{ Workspace related objects
	Control::Workspace* workspaceCtrl;
	QStatusBar* statusBar;
	// @}
	/// @name Attribute finder
	/// @{
	AttributeFinderDialog* attributeFinder;
	/// @}
protected:
	// @{ Undo
	QUndoGroup undoGroup;
	QAction* actionUndo;
    QAction* actionRedo;
    // @}
    QAction* actionNew;
	QAction* actionOpen;
	QAction* actionSave;
	QAction* actionSaveAs;
	QAction* actionSaveAll;
	QAction* actionFind;
	QAction* actionFindNext;
	QAction* actionShowAttributeBuilder;
	QAction* actionShowName;
	QAction* actionShowValue;
	QAction* actionShowUnit;
	QAction* actionShowRange;
	QAction* actionShowInclude;
	QAction* actionShowBacktrackLevel;
public:
	EditConfigDialog(QWidget* parentWidget=0, Qt::WindowFlags flags = 0);
	virtual ~EditConfigDialog();
	void openConfig(const std::string & cfgFilePath);
	static void editConfig(QWidget* parentWidget, const std::string & cfgFilePath, const QString & title = QString());

	bool isWorkspaceClean() const;
	Control::Workspace* getWorkspace();
	ClosableTabWidget* getWorkspaceUi();

	// @{ ui items accessors
	QAction* getActionNew() const;
	QAction* getActionOpen() const;
	QAction* getActionSave() const;
    QAction* getActionSaveAs() const;
    QAction* getActionSaveAll() const;
    QAction* getActionQuit() const;
    QAction* getActionShowName() const;
    QAction* getActionShowValue() const;
    QAction* getActionShowUnit() const;
    QAction* getActionShowRange() const;
    QAction* getActionShowInclude() const;
    QAction* getActionShowBacktrackLevel() const;
    // @}

public slots:
	virtual void reject();
	// @{ Slots for File menu actions.
	void newConfig();
	void loadFile();
	bool save();
	bool saveAs();
	void saveAll();
	// @}
	/// @{ Slots for Edit menu actions.
	void findAttribute();
	void findNextAttribute();
	/// @}
	void toggleAttributeBuilder();
	// @{ Slots for columns
	void showColumn(int index, bool show = true);
	void showValueColumn(bool show = true);
	void showUnitColumn(bool show = true);
	void showRangeColumn(bool show = true);
	void showBacktrackLevelColumn(bool show = true);
	void showIncludeUrlColumn(bool show = true);
	// @}

protected:
	virtual void closeEvent(QCloseEvent *event);
	virtual Control::Workspace* createWorkspace(ClosableTabWidget* ui);

protected slots:
	// @{ Slots for model events
	virtual void onModelAdded(Model::ConfigModel* model);
	virtual void onModelRemoved(Model::ConfigModel* model);
	virtual void onModelActivated(Model::ConfigModel* current, Model::ConfigModel* previous);
	// @}

	virtual void onTabActivated(Control::BaseConfigEditorController* current, Control::BaseConfigEditorController* previous);
	virtual void onCleanChanged(bool isClean);
	virtual void onCurrentNodeChanged(Model::ConfigNode* current,
			Model::ConfigModel* currentModel,
			Model::ConfigNode* previous, Model::ConfigModel* previousModel);
	virtual void onSearchAttribute(const QString & searchText, bool caseSens, bool exactMatch, int column);

private:
	// @{ Initialization
	void createActions();
	void connectActions();
	void initAttributeBuilder();
	void initWorkspace();
	void initAttributeFinder();
	void setupUndoFramework();
	void initToolBar();
	// @}
};
//_____________________________________________________________________________
} /* namespace Ui */
} /* namespace CCfg */

#endif /* CCfg_Ui_EditConfigDialog_h_INCLUDED */
